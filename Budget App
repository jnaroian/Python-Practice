from __future__ import annotations
from typing import Union
floatint=Union[float,int]
class Category:
    totalwithdrawls=0
    def __init__(self, name:str):
        self.name=name
        self.ledger=[]
        self.balance=0
        self.withdrawls=0
        self.ledgerbit={}
    def deposit(self,amount:floatint, description:str=''):
        self.ledgerbit={'amount':amount,'description':description}
        self.ledger.append(self.ledgerbit)
        self.balance+=amount
    def withdraw(self,amount:floatint, description:str=''):
        if self.check_funds(amount):
            self.ledgerbit={'amount':(-1*amount),'description':description}
            self.ledger.append(self.ledgerbit)
            self.balance-=amount
            self.withdrawls+=amount
            Category.totalwithdrawls+=amount
            return True
        else:
            return False
    def get_balance(self):
        return self.balance
    def transfer(self,amount:floatint,category:Category):
        if self.check_funds(amount):
            self.ledgerbit={'amount':(-1*amount),'description':'Transfer to '+category.name}
            self.ledger.append(self.ledgerbit)
            self.balance-=amount
            category.ledgerbit={'amount':amount,'description':'Transfer from '+self.name}
            category.ledger.append(category.ledgerbit)
            category.balance+=amount
            return True
        else:
            return False
    def check_funds(self,amount:floatint):
        if self.balance>=amount:
            return True
        else:
            return False
    def __str__(self):
        firstline=self.title()
        middlelines=self.nums()
        totaline=self.total()
        return(firstline+middlelines+totaline)
    def title(self):
        return(self.name.center(30,'*')+'\n')
    def nums(self):
        lgbt=''
        strin=''
        for ledgerbit in self.ledger:
            if int(ledgerbit['amount'])!= ledgerbit['amount']:
                if len(ledgerbit['description'])<=23:
                    strin+=(ledgerbit['description'] + str(ledgerbit['amount']).rjust(30-len(ledgerbit['description']))+'\n')
                else: 
                    lgbt=ledgerbit['description'][:23]
                    strin+=(lgbt + str(float(ledgerbit['amount'])).rjust(7)+'\n')
            else:
                if len(ledgerbit['description'])<=23:
                    strin+=(ledgerbit['description'] + (str(ledgerbit['amount'])+'.00').rjust(30-len(ledgerbit['description']))+'\n')
                else: 
                    lgbt=ledgerbit['description'][:23]
                    strin+=(lgbt + (str(ledgerbit['amount'])+'.00').rjust(7)+'\n')
        return strin
    def total(self):
        if int(self.balance)!=self.balance:
            return('Total: '+ str(self.balance))
        else:
            return('Total: '+ str(self.balance)+'.00')
    def percent(self):
        return(round(((self.withdrawls/Category.totalwithdrawls)*100)/10)*10)
def create_spend_chart(category:Category):
    spendchart=''
    strin='Percentage spent by category'+'\n'
    i=100
    maxn=0
    k=0
    for c in category:
        if len(c.name)>maxn:
            maxn=len(c.name)
    while i>=0:
        if i==100:
            while k<len(category):
                if category[k].percent()>=i and k==0:
                    strin+=str(i)+'|'+ '    '+' o'
                    k+=1
                elif category[k].percent()>=i and k!=0:
                    strin+= (k*'  ')+'o'
                    k+=1
                elif k>0:
                    k+=1
                else:
                    strin+=str(i)+'|'
                    k+=1
            strin+='\n'
        elif i<100 and i>0:
            k=0
            while k<len(category):
                if category[k].percent()>=i and k==0:
                    strin+=' '+str(i)+'|'+' o  '
                    k+=1
                elif category[k].percent()>=i and k!=0:
                    strin+= 'o  '
                    k+=1
                elif k>0:
                    k+=1
                else:
                    strin+=' '+str(i)+'|    '
                    k+=1
            strin+='\n'
        else:
            k=0
            while k<len(category):
                if category[k].percent()>=i and k==0:
                    strin+='  '+str(i)+'|'+' o'
                    k+=1
                elif category[k].percent()>=i and k!=0:
                    strin+= '  o'
                    k+=1
                elif k>0:
                    k+=1
                else:
                    strin+='  '+str(i)+'|'
                    k+=1
            strin+='\n'
        i-=10
    strin+=('    '+(len(category)*3+1)*'-')
    spendchart=strin
    strin='     '
    i=0
    while i<maxn:
        for cat in category:
            if i>=len(cat.name):
                strin += '   '
            else:
                strin += cat.name[i]+'  '
        strin+='\n'+'     '
        i+=1
    print(spendchart+'\n'+ strin)
food=Category('Food')
entertainment=Category('Entertainment')
business=Category('Business')
food.deposit(900, "deposit")
food.withdraw(45.67, "milk, cereal, eggs, bacon, bread")
food.transfer(20, entertainment)
str(food)
